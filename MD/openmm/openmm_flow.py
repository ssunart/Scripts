# This script was generated by OpenMM-Setup on 2023-08-30.

from openmm import *
from openmm.app import *
from openmm.unit import *

# Input Files

pdb = PDBFile('1onp-processed.pdb')
forcefield = ForceField('amber99sb.xml', 'tip3p.xml')

# System Configuration

nonbondedMethod = NoCutoff
constraints = None
rigidWater = False

# Integration Options

dt = 10000*picoseconds
temperature = 300*kelvin
friction = 1/picosecond
pressure = 1*atmospheres
barostatInterval = 100

# Simulation Options

steps = 10000
equilibrationSteps = 100
platform = Platform.getPlatformByName('CUDA')
platformProperties = {'Precision': 'single'}
dcdReporter = DCDReporter('test_1onp', test_1onp_)

# Prepare the Simulation

print('Building system...')
topology = pdb.topology
positions = pdb.positions
system = forcefield.createSystem(topology, nonbondedMethod=nonbondedMethod,
    constraints=constraints, rigidWater=rigidWater)
system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
integrator = LangevinMiddleIntegrator(temperature, friction, dt)
simulation = Simulation(topology, system, integrator, platform, platformProperties)
simulation.context.setPositions(positions)

# Minimize and Equilibrate

print('Performing energy minimization...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)

# Simulate

print('Simulating...')
simulation.reporters.append(dcdReporter)
simulation.currentStep = 0
